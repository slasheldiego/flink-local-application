/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.belcorp.realtime.entities;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TripEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TripEvent\",\"namespace\":\"com.belcorp.realtime.entities\",\"fields\":[{\"name\":\"vendor_id\",\"type\":\"int\"},{\"name\":\"pickup_datetime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"dropoff_datetime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"passenger_count\",\"type\":\"int\"},{\"name\":\"trip_distance\",\"type\":\"double\"},{\"name\":\"ratecode_id\",\"type\":\"int\"},{\"name\":\"store_and_fwd_flag\",\"type\":\"string\"},{\"name\":\"pickup_location_id\",\"type\":\"int\"},{\"name\":\"dropoff_location_id\",\"type\":\"int\"},{\"name\":\"payment_type\",\"type\":\"int\"},{\"name\":\"fare_amount\",\"type\":\"double\"},{\"name\":\"extra\",\"type\":\"double\"},{\"name\":\"mta_tax\",\"type\":\"double\"},{\"name\":\"tip_amount\",\"type\":\"double\"},{\"name\":\"tolls_amount\",\"type\":\"double\"},{\"name\":\"improvement_surcharge\",\"type\":\"double\"},{\"name\":\"total_amount\",\"type\":\"double\"},{\"name\":\"trip_id\",\"type\":\"long\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"padding\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int vendor_id;
  @Deprecated public long pickup_datetime;
  @Deprecated public long dropoff_datetime;
  @Deprecated public int passenger_count;
  @Deprecated public double trip_distance;
  @Deprecated public int ratecode_id;
  @Deprecated public java.lang.CharSequence store_and_fwd_flag;
  @Deprecated public int pickup_location_id;
  @Deprecated public int dropoff_location_id;
  @Deprecated public int payment_type;
  @Deprecated public double fare_amount;
  @Deprecated public double extra;
  @Deprecated public double mta_tax;
  @Deprecated public double tip_amount;
  @Deprecated public double tolls_amount;
  @Deprecated public double improvement_surcharge;
  @Deprecated public double total_amount;
  @Deprecated public long trip_id;
  @Deprecated public java.lang.CharSequence type;
  @Deprecated public java.lang.CharSequence padding;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TripEvent() {}

  /**
   * All-args constructor.
   */
  public TripEvent(java.lang.Integer vendor_id, java.lang.Long pickup_datetime, java.lang.Long dropoff_datetime, java.lang.Integer passenger_count, java.lang.Double trip_distance, java.lang.Integer ratecode_id, java.lang.CharSequence store_and_fwd_flag, java.lang.Integer pickup_location_id, java.lang.Integer dropoff_location_id, java.lang.Integer payment_type, java.lang.Double fare_amount, java.lang.Double extra, java.lang.Double mta_tax, java.lang.Double tip_amount, java.lang.Double tolls_amount, java.lang.Double improvement_surcharge, java.lang.Double total_amount, java.lang.Long trip_id, java.lang.CharSequence type, java.lang.CharSequence padding) {
    this.vendor_id = vendor_id;
    this.pickup_datetime = pickup_datetime;
    this.dropoff_datetime = dropoff_datetime;
    this.passenger_count = passenger_count;
    this.trip_distance = trip_distance;
    this.ratecode_id = ratecode_id;
    this.store_and_fwd_flag = store_and_fwd_flag;
    this.pickup_location_id = pickup_location_id;
    this.dropoff_location_id = dropoff_location_id;
    this.payment_type = payment_type;
    this.fare_amount = fare_amount;
    this.extra = extra;
    this.mta_tax = mta_tax;
    this.tip_amount = tip_amount;
    this.tolls_amount = tolls_amount;
    this.improvement_surcharge = improvement_surcharge;
    this.total_amount = total_amount;
    this.trip_id = trip_id;
    this.type = type;
    this.padding = padding;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return vendor_id;
    case 1: return pickup_datetime;
    case 2: return dropoff_datetime;
    case 3: return passenger_count;
    case 4: return trip_distance;
    case 5: return ratecode_id;
    case 6: return store_and_fwd_flag;
    case 7: return pickup_location_id;
    case 8: return dropoff_location_id;
    case 9: return payment_type;
    case 10: return fare_amount;
    case 11: return extra;
    case 12: return mta_tax;
    case 13: return tip_amount;
    case 14: return tolls_amount;
    case 15: return improvement_surcharge;
    case 16: return total_amount;
    case 17: return trip_id;
    case 18: return type;
    case 19: return padding;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: vendor_id = (java.lang.Integer)value$; break;
    case 1: pickup_datetime = (java.lang.Long)value$; break;
    case 2: dropoff_datetime = (java.lang.Long)value$; break;
    case 3: passenger_count = (java.lang.Integer)value$; break;
    case 4: trip_distance = (java.lang.Double)value$; break;
    case 5: ratecode_id = (java.lang.Integer)value$; break;
    case 6: store_and_fwd_flag = (java.lang.CharSequence)value$; break;
    case 7: pickup_location_id = (java.lang.Integer)value$; break;
    case 8: dropoff_location_id = (java.lang.Integer)value$; break;
    case 9: payment_type = (java.lang.Integer)value$; break;
    case 10: fare_amount = (java.lang.Double)value$; break;
    case 11: extra = (java.lang.Double)value$; break;
    case 12: mta_tax = (java.lang.Double)value$; break;
    case 13: tip_amount = (java.lang.Double)value$; break;
    case 14: tolls_amount = (java.lang.Double)value$; break;
    case 15: improvement_surcharge = (java.lang.Double)value$; break;
    case 16: total_amount = (java.lang.Double)value$; break;
    case 17: trip_id = (java.lang.Long)value$; break;
    case 18: type = (java.lang.CharSequence)value$; break;
    case 19: padding = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'vendor_id' field.
   */
  public java.lang.Integer getVendorId() {
    return vendor_id;
  }

  /**
   * Sets the value of the 'vendor_id' field.
   * @param value the value to set.
   */
  public void setVendorId(java.lang.Integer value) {
    this.vendor_id = value;
  }

  /**
   * Gets the value of the 'pickup_datetime' field.
   */
  public java.lang.Long getPickupDatetime() {
    return pickup_datetime;
  }

  /**
   * Sets the value of the 'pickup_datetime' field.
   * @param value the value to set.
   */
  public void setPickupDatetime(java.lang.Long value) {
    this.pickup_datetime = value;
  }

  /**
   * Gets the value of the 'dropoff_datetime' field.
   */
  public java.lang.Long getDropoffDatetime() {
    return dropoff_datetime;
  }

  /**
   * Sets the value of the 'dropoff_datetime' field.
   * @param value the value to set.
   */
  public void setDropoffDatetime(java.lang.Long value) {
    this.dropoff_datetime = value;
  }

  /**
   * Gets the value of the 'passenger_count' field.
   */
  public java.lang.Integer getPassengerCount() {
    return passenger_count;
  }

  /**
   * Sets the value of the 'passenger_count' field.
   * @param value the value to set.
   */
  public void setPassengerCount(java.lang.Integer value) {
    this.passenger_count = value;
  }

  /**
   * Gets the value of the 'trip_distance' field.
   */
  public java.lang.Double getTripDistance() {
    return trip_distance;
  }

  /**
   * Sets the value of the 'trip_distance' field.
   * @param value the value to set.
   */
  public void setTripDistance(java.lang.Double value) {
    this.trip_distance = value;
  }

  /**
   * Gets the value of the 'ratecode_id' field.
   */
  public java.lang.Integer getRatecodeId() {
    return ratecode_id;
  }

  /**
   * Sets the value of the 'ratecode_id' field.
   * @param value the value to set.
   */
  public void setRatecodeId(java.lang.Integer value) {
    this.ratecode_id = value;
  }

  /**
   * Gets the value of the 'store_and_fwd_flag' field.
   */
  public java.lang.CharSequence getStoreAndFwdFlag() {
    return store_and_fwd_flag;
  }

  /**
   * Sets the value of the 'store_and_fwd_flag' field.
   * @param value the value to set.
   */
  public void setStoreAndFwdFlag(java.lang.CharSequence value) {
    this.store_and_fwd_flag = value;
  }

  /**
   * Gets the value of the 'pickup_location_id' field.
   */
  public java.lang.Integer getPickupLocationId() {
    return pickup_location_id;
  }

  /**
   * Sets the value of the 'pickup_location_id' field.
   * @param value the value to set.
   */
  public void setPickupLocationId(java.lang.Integer value) {
    this.pickup_location_id = value;
  }

  /**
   * Gets the value of the 'dropoff_location_id' field.
   */
  public java.lang.Integer getDropoffLocationId() {
    return dropoff_location_id;
  }

  /**
   * Sets the value of the 'dropoff_location_id' field.
   * @param value the value to set.
   */
  public void setDropoffLocationId(java.lang.Integer value) {
    this.dropoff_location_id = value;
  }

  /**
   * Gets the value of the 'payment_type' field.
   */
  public java.lang.Integer getPaymentType() {
    return payment_type;
  }

  /**
   * Sets the value of the 'payment_type' field.
   * @param value the value to set.
   */
  public void setPaymentType(java.lang.Integer value) {
    this.payment_type = value;
  }

  /**
   * Gets the value of the 'fare_amount' field.
   */
  public java.lang.Double getFareAmount() {
    return fare_amount;
  }

  /**
   * Sets the value of the 'fare_amount' field.
   * @param value the value to set.
   */
  public void setFareAmount(java.lang.Double value) {
    this.fare_amount = value;
  }

  /**
   * Gets the value of the 'extra' field.
   */
  public java.lang.Double getExtra() {
    return extra;
  }

  /**
   * Sets the value of the 'extra' field.
   * @param value the value to set.
   */
  public void setExtra(java.lang.Double value) {
    this.extra = value;
  }

  /**
   * Gets the value of the 'mta_tax' field.
   */
  public java.lang.Double getMtaTax() {
    return mta_tax;
  }

  /**
   * Sets the value of the 'mta_tax' field.
   * @param value the value to set.
   */
  public void setMtaTax(java.lang.Double value) {
    this.mta_tax = value;
  }

  /**
   * Gets the value of the 'tip_amount' field.
   */
  public java.lang.Double getTipAmount() {
    return tip_amount;
  }

  /**
   * Sets the value of the 'tip_amount' field.
   * @param value the value to set.
   */
  public void setTipAmount(java.lang.Double value) {
    this.tip_amount = value;
  }

  /**
   * Gets the value of the 'tolls_amount' field.
   */
  public java.lang.Double getTollsAmount() {
    return tolls_amount;
  }

  /**
   * Sets the value of the 'tolls_amount' field.
   * @param value the value to set.
   */
  public void setTollsAmount(java.lang.Double value) {
    this.tolls_amount = value;
  }

  /**
   * Gets the value of the 'improvement_surcharge' field.
   */
  public java.lang.Double getImprovementSurcharge() {
    return improvement_surcharge;
  }

  /**
   * Sets the value of the 'improvement_surcharge' field.
   * @param value the value to set.
   */
  public void setImprovementSurcharge(java.lang.Double value) {
    this.improvement_surcharge = value;
  }

  /**
   * Gets the value of the 'total_amount' field.
   */
  public java.lang.Double getTotalAmount() {
    return total_amount;
  }

  /**
   * Sets the value of the 'total_amount' field.
   * @param value the value to set.
   */
  public void setTotalAmount(java.lang.Double value) {
    this.total_amount = value;
  }

  /**
   * Gets the value of the 'trip_id' field.
   */
  public java.lang.Long getTripId() {
    return trip_id;
  }

  /**
   * Sets the value of the 'trip_id' field.
   * @param value the value to set.
   */
  public void setTripId(java.lang.Long value) {
    this.trip_id = value;
  }

  /**
   * Gets the value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'padding' field.
   */
  public java.lang.CharSequence getPadding() {
    return padding;
  }

  /**
   * Sets the value of the 'padding' field.
   * @param value the value to set.
   */
  public void setPadding(java.lang.CharSequence value) {
    this.padding = value;
  }

  /** Creates a new TripEvent RecordBuilder */
  public static com.belcorp.realtime.entities.TripEvent.Builder newBuilder() {
    return new com.belcorp.realtime.entities.TripEvent.Builder();
  }
  
  /** Creates a new TripEvent RecordBuilder by copying an existing Builder */
  public static com.belcorp.realtime.entities.TripEvent.Builder newBuilder(com.belcorp.realtime.entities.TripEvent.Builder other) {
    return new com.belcorp.realtime.entities.TripEvent.Builder(other);
  }
  
  /** Creates a new TripEvent RecordBuilder by copying an existing TripEvent instance */
  public static com.belcorp.realtime.entities.TripEvent.Builder newBuilder(com.belcorp.realtime.entities.TripEvent other) {
    return new com.belcorp.realtime.entities.TripEvent.Builder(other);
  }
  
  /**
   * RecordBuilder for TripEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TripEvent>
    implements org.apache.avro.data.RecordBuilder<TripEvent> {

    private int vendor_id;
    private long pickup_datetime;
    private long dropoff_datetime;
    private int passenger_count;
    private double trip_distance;
    private int ratecode_id;
    private java.lang.CharSequence store_and_fwd_flag;
    private int pickup_location_id;
    private int dropoff_location_id;
    private int payment_type;
    private double fare_amount;
    private double extra;
    private double mta_tax;
    private double tip_amount;
    private double tolls_amount;
    private double improvement_surcharge;
    private double total_amount;
    private long trip_id;
    private java.lang.CharSequence type;
    private java.lang.CharSequence padding;

    /** Creates a new Builder */
    private Builder() {
      super(com.belcorp.realtime.entities.TripEvent.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.belcorp.realtime.entities.TripEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.vendor_id)) {
        this.vendor_id = data().deepCopy(fields()[0].schema(), other.vendor_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pickup_datetime)) {
        this.pickup_datetime = data().deepCopy(fields()[1].schema(), other.pickup_datetime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dropoff_datetime)) {
        this.dropoff_datetime = data().deepCopy(fields()[2].schema(), other.dropoff_datetime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.passenger_count)) {
        this.passenger_count = data().deepCopy(fields()[3].schema(), other.passenger_count);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.trip_distance)) {
        this.trip_distance = data().deepCopy(fields()[4].schema(), other.trip_distance);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ratecode_id)) {
        this.ratecode_id = data().deepCopy(fields()[5].schema(), other.ratecode_id);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.store_and_fwd_flag)) {
        this.store_and_fwd_flag = data().deepCopy(fields()[6].schema(), other.store_and_fwd_flag);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.pickup_location_id)) {
        this.pickup_location_id = data().deepCopy(fields()[7].schema(), other.pickup_location_id);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.dropoff_location_id)) {
        this.dropoff_location_id = data().deepCopy(fields()[8].schema(), other.dropoff_location_id);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.payment_type)) {
        this.payment_type = data().deepCopy(fields()[9].schema(), other.payment_type);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.fare_amount)) {
        this.fare_amount = data().deepCopy(fields()[10].schema(), other.fare_amount);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.extra)) {
        this.extra = data().deepCopy(fields()[11].schema(), other.extra);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.mta_tax)) {
        this.mta_tax = data().deepCopy(fields()[12].schema(), other.mta_tax);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.tip_amount)) {
        this.tip_amount = data().deepCopy(fields()[13].schema(), other.tip_amount);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.tolls_amount)) {
        this.tolls_amount = data().deepCopy(fields()[14].schema(), other.tolls_amount);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.improvement_surcharge)) {
        this.improvement_surcharge = data().deepCopy(fields()[15].schema(), other.improvement_surcharge);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.total_amount)) {
        this.total_amount = data().deepCopy(fields()[16].schema(), other.total_amount);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.trip_id)) {
        this.trip_id = data().deepCopy(fields()[17].schema(), other.trip_id);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.type)) {
        this.type = data().deepCopy(fields()[18].schema(), other.type);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.padding)) {
        this.padding = data().deepCopy(fields()[19].schema(), other.padding);
        fieldSetFlags()[19] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TripEvent instance */
    private Builder(com.belcorp.realtime.entities.TripEvent other) {
            super(com.belcorp.realtime.entities.TripEvent.SCHEMA$);
      if (isValidValue(fields()[0], other.vendor_id)) {
        this.vendor_id = data().deepCopy(fields()[0].schema(), other.vendor_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pickup_datetime)) {
        this.pickup_datetime = data().deepCopy(fields()[1].schema(), other.pickup_datetime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dropoff_datetime)) {
        this.dropoff_datetime = data().deepCopy(fields()[2].schema(), other.dropoff_datetime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.passenger_count)) {
        this.passenger_count = data().deepCopy(fields()[3].schema(), other.passenger_count);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.trip_distance)) {
        this.trip_distance = data().deepCopy(fields()[4].schema(), other.trip_distance);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ratecode_id)) {
        this.ratecode_id = data().deepCopy(fields()[5].schema(), other.ratecode_id);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.store_and_fwd_flag)) {
        this.store_and_fwd_flag = data().deepCopy(fields()[6].schema(), other.store_and_fwd_flag);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.pickup_location_id)) {
        this.pickup_location_id = data().deepCopy(fields()[7].schema(), other.pickup_location_id);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.dropoff_location_id)) {
        this.dropoff_location_id = data().deepCopy(fields()[8].schema(), other.dropoff_location_id);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.payment_type)) {
        this.payment_type = data().deepCopy(fields()[9].schema(), other.payment_type);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.fare_amount)) {
        this.fare_amount = data().deepCopy(fields()[10].schema(), other.fare_amount);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.extra)) {
        this.extra = data().deepCopy(fields()[11].schema(), other.extra);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.mta_tax)) {
        this.mta_tax = data().deepCopy(fields()[12].schema(), other.mta_tax);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.tip_amount)) {
        this.tip_amount = data().deepCopy(fields()[13].schema(), other.tip_amount);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.tolls_amount)) {
        this.tolls_amount = data().deepCopy(fields()[14].schema(), other.tolls_amount);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.improvement_surcharge)) {
        this.improvement_surcharge = data().deepCopy(fields()[15].schema(), other.improvement_surcharge);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.total_amount)) {
        this.total_amount = data().deepCopy(fields()[16].schema(), other.total_amount);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.trip_id)) {
        this.trip_id = data().deepCopy(fields()[17].schema(), other.trip_id);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.type)) {
        this.type = data().deepCopy(fields()[18].schema(), other.type);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.padding)) {
        this.padding = data().deepCopy(fields()[19].schema(), other.padding);
        fieldSetFlags()[19] = true;
      }
    }

    /** Gets the value of the 'vendor_id' field */
    public java.lang.Integer getVendorId() {
      return vendor_id;
    }
    
    /** Sets the value of the 'vendor_id' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setVendorId(int value) {
      validate(fields()[0], value);
      this.vendor_id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'vendor_id' field has been set */
    public boolean hasVendorId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'vendor_id' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearVendorId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'pickup_datetime' field */
    public java.lang.Long getPickupDatetime() {
      return pickup_datetime;
    }
    
    /** Sets the value of the 'pickup_datetime' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setPickupDatetime(long value) {
      validate(fields()[1], value);
      this.pickup_datetime = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'pickup_datetime' field has been set */
    public boolean hasPickupDatetime() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'pickup_datetime' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearPickupDatetime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'dropoff_datetime' field */
    public java.lang.Long getDropoffDatetime() {
      return dropoff_datetime;
    }
    
    /** Sets the value of the 'dropoff_datetime' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setDropoffDatetime(long value) {
      validate(fields()[2], value);
      this.dropoff_datetime = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'dropoff_datetime' field has been set */
    public boolean hasDropoffDatetime() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'dropoff_datetime' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearDropoffDatetime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'passenger_count' field */
    public java.lang.Integer getPassengerCount() {
      return passenger_count;
    }
    
    /** Sets the value of the 'passenger_count' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setPassengerCount(int value) {
      validate(fields()[3], value);
      this.passenger_count = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'passenger_count' field has been set */
    public boolean hasPassengerCount() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'passenger_count' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearPassengerCount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'trip_distance' field */
    public java.lang.Double getTripDistance() {
      return trip_distance;
    }
    
    /** Sets the value of the 'trip_distance' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setTripDistance(double value) {
      validate(fields()[4], value);
      this.trip_distance = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'trip_distance' field has been set */
    public boolean hasTripDistance() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'trip_distance' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearTripDistance() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'ratecode_id' field */
    public java.lang.Integer getRatecodeId() {
      return ratecode_id;
    }
    
    /** Sets the value of the 'ratecode_id' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setRatecodeId(int value) {
      validate(fields()[5], value);
      this.ratecode_id = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'ratecode_id' field has been set */
    public boolean hasRatecodeId() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'ratecode_id' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearRatecodeId() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'store_and_fwd_flag' field */
    public java.lang.CharSequence getStoreAndFwdFlag() {
      return store_and_fwd_flag;
    }
    
    /** Sets the value of the 'store_and_fwd_flag' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setStoreAndFwdFlag(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.store_and_fwd_flag = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'store_and_fwd_flag' field has been set */
    public boolean hasStoreAndFwdFlag() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'store_and_fwd_flag' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearStoreAndFwdFlag() {
      store_and_fwd_flag = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'pickup_location_id' field */
    public java.lang.Integer getPickupLocationId() {
      return pickup_location_id;
    }
    
    /** Sets the value of the 'pickup_location_id' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setPickupLocationId(int value) {
      validate(fields()[7], value);
      this.pickup_location_id = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'pickup_location_id' field has been set */
    public boolean hasPickupLocationId() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'pickup_location_id' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearPickupLocationId() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'dropoff_location_id' field */
    public java.lang.Integer getDropoffLocationId() {
      return dropoff_location_id;
    }
    
    /** Sets the value of the 'dropoff_location_id' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setDropoffLocationId(int value) {
      validate(fields()[8], value);
      this.dropoff_location_id = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'dropoff_location_id' field has been set */
    public boolean hasDropoffLocationId() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'dropoff_location_id' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearDropoffLocationId() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'payment_type' field */
    public java.lang.Integer getPaymentType() {
      return payment_type;
    }
    
    /** Sets the value of the 'payment_type' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setPaymentType(int value) {
      validate(fields()[9], value);
      this.payment_type = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'payment_type' field has been set */
    public boolean hasPaymentType() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'payment_type' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearPaymentType() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'fare_amount' field */
    public java.lang.Double getFareAmount() {
      return fare_amount;
    }
    
    /** Sets the value of the 'fare_amount' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setFareAmount(double value) {
      validate(fields()[10], value);
      this.fare_amount = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'fare_amount' field has been set */
    public boolean hasFareAmount() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'fare_amount' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearFareAmount() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'extra' field */
    public java.lang.Double getExtra() {
      return extra;
    }
    
    /** Sets the value of the 'extra' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setExtra(double value) {
      validate(fields()[11], value);
      this.extra = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'extra' field has been set */
    public boolean hasExtra() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'extra' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearExtra() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'mta_tax' field */
    public java.lang.Double getMtaTax() {
      return mta_tax;
    }
    
    /** Sets the value of the 'mta_tax' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setMtaTax(double value) {
      validate(fields()[12], value);
      this.mta_tax = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'mta_tax' field has been set */
    public boolean hasMtaTax() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'mta_tax' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearMtaTax() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'tip_amount' field */
    public java.lang.Double getTipAmount() {
      return tip_amount;
    }
    
    /** Sets the value of the 'tip_amount' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setTipAmount(double value) {
      validate(fields()[13], value);
      this.tip_amount = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'tip_amount' field has been set */
    public boolean hasTipAmount() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'tip_amount' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearTipAmount() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'tolls_amount' field */
    public java.lang.Double getTollsAmount() {
      return tolls_amount;
    }
    
    /** Sets the value of the 'tolls_amount' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setTollsAmount(double value) {
      validate(fields()[14], value);
      this.tolls_amount = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'tolls_amount' field has been set */
    public boolean hasTollsAmount() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'tolls_amount' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearTollsAmount() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'improvement_surcharge' field */
    public java.lang.Double getImprovementSurcharge() {
      return improvement_surcharge;
    }
    
    /** Sets the value of the 'improvement_surcharge' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setImprovementSurcharge(double value) {
      validate(fields()[15], value);
      this.improvement_surcharge = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'improvement_surcharge' field has been set */
    public boolean hasImprovementSurcharge() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'improvement_surcharge' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearImprovementSurcharge() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'total_amount' field */
    public java.lang.Double getTotalAmount() {
      return total_amount;
    }
    
    /** Sets the value of the 'total_amount' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setTotalAmount(double value) {
      validate(fields()[16], value);
      this.total_amount = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'total_amount' field has been set */
    public boolean hasTotalAmount() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'total_amount' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearTotalAmount() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'trip_id' field */
    public java.lang.Long getTripId() {
      return trip_id;
    }
    
    /** Sets the value of the 'trip_id' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setTripId(long value) {
      validate(fields()[17], value);
      this.trip_id = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'trip_id' field has been set */
    public boolean hasTripId() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'trip_id' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearTripId() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public java.lang.CharSequence getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setType(java.lang.CharSequence value) {
      validate(fields()[18], value);
      this.type = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'type' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearType() {
      type = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'padding' field */
    public java.lang.CharSequence getPadding() {
      return padding;
    }
    
    /** Sets the value of the 'padding' field */
    public com.belcorp.realtime.entities.TripEvent.Builder setPadding(java.lang.CharSequence value) {
      validate(fields()[19], value);
      this.padding = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'padding' field has been set */
    public boolean hasPadding() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'padding' field */
    public com.belcorp.realtime.entities.TripEvent.Builder clearPadding() {
      padding = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    @Override
    public TripEvent build() {
      try {
        TripEvent record = new TripEvent();
        record.vendor_id = fieldSetFlags()[0] ? this.vendor_id : (java.lang.Integer) defaultValue(fields()[0]);
        record.pickup_datetime = fieldSetFlags()[1] ? this.pickup_datetime : (java.lang.Long) defaultValue(fields()[1]);
        record.dropoff_datetime = fieldSetFlags()[2] ? this.dropoff_datetime : (java.lang.Long) defaultValue(fields()[2]);
        record.passenger_count = fieldSetFlags()[3] ? this.passenger_count : (java.lang.Integer) defaultValue(fields()[3]);
        record.trip_distance = fieldSetFlags()[4] ? this.trip_distance : (java.lang.Double) defaultValue(fields()[4]);
        record.ratecode_id = fieldSetFlags()[5] ? this.ratecode_id : (java.lang.Integer) defaultValue(fields()[5]);
        record.store_and_fwd_flag = fieldSetFlags()[6] ? this.store_and_fwd_flag : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.pickup_location_id = fieldSetFlags()[7] ? this.pickup_location_id : (java.lang.Integer) defaultValue(fields()[7]);
        record.dropoff_location_id = fieldSetFlags()[8] ? this.dropoff_location_id : (java.lang.Integer) defaultValue(fields()[8]);
        record.payment_type = fieldSetFlags()[9] ? this.payment_type : (java.lang.Integer) defaultValue(fields()[9]);
        record.fare_amount = fieldSetFlags()[10] ? this.fare_amount : (java.lang.Double) defaultValue(fields()[10]);
        record.extra = fieldSetFlags()[11] ? this.extra : (java.lang.Double) defaultValue(fields()[11]);
        record.mta_tax = fieldSetFlags()[12] ? this.mta_tax : (java.lang.Double) defaultValue(fields()[12]);
        record.tip_amount = fieldSetFlags()[13] ? this.tip_amount : (java.lang.Double) defaultValue(fields()[13]);
        record.tolls_amount = fieldSetFlags()[14] ? this.tolls_amount : (java.lang.Double) defaultValue(fields()[14]);
        record.improvement_surcharge = fieldSetFlags()[15] ? this.improvement_surcharge : (java.lang.Double) defaultValue(fields()[15]);
        record.total_amount = fieldSetFlags()[16] ? this.total_amount : (java.lang.Double) defaultValue(fields()[16]);
        record.trip_id = fieldSetFlags()[17] ? this.trip_id : (java.lang.Long) defaultValue(fields()[17]);
        record.type = fieldSetFlags()[18] ? this.type : (java.lang.CharSequence) defaultValue(fields()[18]);
        record.padding = fieldSetFlags()[19] ? this.padding : (java.lang.CharSequence) defaultValue(fields()[19]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
