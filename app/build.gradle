/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6/userguide/tutorial_java_projects.html
 */
buildscript {
    repositories {
        jcenter() // this applies only to the Gradle 'Shadow' plugin
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.0.0'
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    id 'base'

    id 'idea'

    id 'com.github.johnrengelman.shadow' version '6.0.0'
}

// artifact properties
group = 'com.corporate.realtime.analytics'
version = '0.1-SNAPSHOT'
mainClassName = 'com.corporate.realtime.analytics.App'
description = """Flink Quickstart Job"""

application {
    // Define the main class for the application.
    mainClassName = 'com.corporate.realtime.analytics.App'
}

ext {
    javaVersion = '1.8'
    flinkVersion = '1.8.0'
    scalaBinaryVersion = '2.11'
    slf4jVersion = '1.7.7'
    log4jVersion = '1.2.17'
    scalaVersion = '2.11'
    scala = '2.11'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

applicationDefaultJvmArgs = ["-Dlog4j.configuration=log4j.properties"]

task wrapper(type: Wrapper) {
    gradleVersion = '6.4.1'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    maven { url "https://repository.apache.org/content/repositories/snapshots/" }
}

// NOTE: We cannot use "compileOnly" or "shadow" configurations since then we could not run code
// in the IDE or with "gradle run". We also cannot exclude transitive dependencies from the
// shadowJar yet (see https://github.com/johnrengelman/shadow/issues/159).
// -> Explicitly define the // libraries we want to be included in the "flinkShadowJar" configuration!
configurations {
    flinkShadowJar // dependencies which go into the shadowJar

    // always exclude these (also from transitive dependencies) since they are provided by Flink
    //flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
    flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
    flinkShadowJar.exclude group: 'org.slf4j'
    flinkShadowJar.exclude group: 'log4j'
    flinkShadowJar.implementation group: 'org.apache.flink', name: 'flink-clients_2.11', version: '1.13.0'
}

dependencies {
    // This dependency is used by the application.
    
    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'

    implementation 'com.google.guava:guava:29.0-jre'
    implementation 'com.azure:azure-messaging-eventhubs:5.3.1'
    implementation 'com.google.code.gson:gson:2.2.2'
    implementation 'software.amazon.awssdk:sns:2.15.77'
    implementation 'software.amazon.awssdk:regions:2.15.77'
    implementation 'software.amazon.awssdk:auth:2.15.77'
    implementation 'com.amazonaws:aws-java-sdk-sns:1.11.950'
    implementation 'software.amazon.kinesis:amazon-kinesis-client:2.2.9'
    implementation 'org.apache.kafka:kafka_2.12:2.2.1'
    implementation 'org.apache.kafka:kafka-clients:2.2.1'
    compile group: 'org.apache.flink', name: 'flink-clients_2.11', version: '1.13.0'
    compile group: 'org.apache.flink', name: 'flink-connector-kinesis_2.11', version: '1.13.0'
    compile group: 'org.apache.flink', name: 'flink-connector-kafka_2.11', version: '1.13.0'
    compile group: 'org.apache.flink', name: 'flink-json', version: '1.13.0'
    compile group: 'org.apache.flink', name: 'flink-avro', version: '1.13.0'
    compile group: 'org.apache.flink', name: 'flink-parquet_2.11', version: '1.13.0'
    compile group: 'org.apache.flink', name: 'flink-connector-elasticsearch6_2.11', version: '1.13.0'
    compile group: 'org.apache.flink', name: 'flink-s3-fs-hadoop', version: '1.13.0'
    compile group: 'org.apache.parquet', name: 'parquet-avro', version: '1.10.0'
    compile group: 'org.apache.avro', name: 'avro', version: '1.8.2'
    implementation group: 'com.amazonaws', name: 'aws-kinesisanalytics-runtime', version: '1.2.0'
    implementation group: 'vc.inreach.aws', name: 'aws-signing-request-interceptor', version: '0.0.22'
}

// make compileOnly dependencies available for tests:
sourceSets {
    main.compileClasspath += configurations.flinkShadowJar
    main.runtimeClasspath += configurations.flinkShadowJar

    test.compileClasspath += configurations.flinkShadowJar
    test.runtimeClasspath += configurations.flinkShadowJar

    javadoc.classpath += configurations.flinkShadowJar
}

run.classpath = sourceSets.main.runtimeClasspath

jar {
    manifest {
        attributes 'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version'),
                'Main-Class': mainClassName
    }
}

task fatJar(type: Jar) {
    zip64 true
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
        	'Implementation-Version': version,
        	"Main-Class": "$mainClassName"
    }
    configurations.implementation.setCanBeResolved(true)
    baseName = project.name + '-all'
    from { configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
}

shadowJar {
    configurations = [project.configurations.flinkShadowJar]
    zip64 true
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
        	'Implementation-Version': version,
        	"Main-Class": "$mainClassName"
    }
    configurations.implementation.setCanBeResolved(true)
    baseName = project.name + '-all'
    from { configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
}